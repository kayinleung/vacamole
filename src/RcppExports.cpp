// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// assign_hh
DataFrame assign_hh(const int pop_size, const DataFrame hh_info_mat);
RcppExport SEXP _vacamole_assign_hh(SEXP pop_sizeSEXP, SEXP hh_info_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< const DataFrame >::type hh_info_mat(hh_info_matSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_hh(pop_size, hh_info_mat));
    return rcpp_result_gen;
END_RCPP
}
// change_states
List change_states(int id, int state_i, int age_i, int time_of_infection_i, int latent_period_i, int infectious_period_i, int vac_mech, int vac_status_i, NumericVector ve, int time_step, NumericVector prop_asympt_vec, NumericVector prop_severe, NumericVector prop_hosp, NumericVector prop_non_hosp_death, NumericVector prop_hosp_death, NumericVector prop_ICU, NumericVector prop_ICU_death, NumericVector hh_i_members, NumericVector household_isolation, int time_in_hh_isolation, int time_sympt_to_hosp_i, int time_hosp_to_discharge_i, int time_hosp_to_death_i, int time_hosp_to_ICU_i, int time_ICU_to_hosp_i, int time_ICU_step_down_care_i);
RcppExport SEXP _vacamole_change_states(SEXP idSEXP, SEXP state_iSEXP, SEXP age_iSEXP, SEXP time_of_infection_iSEXP, SEXP latent_period_iSEXP, SEXP infectious_period_iSEXP, SEXP vac_mechSEXP, SEXP vac_status_iSEXP, SEXP veSEXP, SEXP time_stepSEXP, SEXP prop_asympt_vecSEXP, SEXP prop_severeSEXP, SEXP prop_hospSEXP, SEXP prop_non_hosp_deathSEXP, SEXP prop_hosp_deathSEXP, SEXP prop_ICUSEXP, SEXP prop_ICU_deathSEXP, SEXP hh_i_membersSEXP, SEXP household_isolationSEXP, SEXP time_in_hh_isolationSEXP, SEXP time_sympt_to_hosp_iSEXP, SEXP time_hosp_to_discharge_iSEXP, SEXP time_hosp_to_death_iSEXP, SEXP time_hosp_to_ICU_iSEXP, SEXP time_ICU_to_hosp_iSEXP, SEXP time_ICU_step_down_care_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type state_i(state_iSEXP);
    Rcpp::traits::input_parameter< int >::type age_i(age_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_of_infection_i(time_of_infection_iSEXP);
    Rcpp::traits::input_parameter< int >::type latent_period_i(latent_period_iSEXP);
    Rcpp::traits::input_parameter< int >::type infectious_period_i(infectious_period_iSEXP);
    Rcpp::traits::input_parameter< int >::type vac_mech(vac_mechSEXP);
    Rcpp::traits::input_parameter< int >::type vac_status_i(vac_status_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ve(veSEXP);
    Rcpp::traits::input_parameter< int >::type time_step(time_stepSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_asympt_vec(prop_asympt_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_severe(prop_severeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_hosp(prop_hospSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_non_hosp_death(prop_non_hosp_deathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_hosp_death(prop_hosp_deathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_ICU(prop_ICUSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_ICU_death(prop_ICU_deathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hh_i_members(hh_i_membersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type household_isolation(household_isolationSEXP);
    Rcpp::traits::input_parameter< int >::type time_in_hh_isolation(time_in_hh_isolationSEXP);
    Rcpp::traits::input_parameter< int >::type time_sympt_to_hosp_i(time_sympt_to_hosp_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_hosp_to_discharge_i(time_hosp_to_discharge_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_hosp_to_death_i(time_hosp_to_death_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_hosp_to_ICU_i(time_hosp_to_ICU_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_ICU_to_hosp_i(time_ICU_to_hosp_iSEXP);
    Rcpp::traits::input_parameter< int >::type time_ICU_step_down_care_i(time_ICU_step_down_care_iSEXP);
    rcpp_result_gen = Rcpp::wrap(change_states(id, state_i, age_i, time_of_infection_i, latent_period_i, infectious_period_i, vac_mech, vac_status_i, ve, time_step, prop_asympt_vec, prop_severe, prop_hosp, prop_non_hosp_death, prop_hosp_death, prop_ICU, prop_ICU_death, hh_i_members, household_isolation, time_in_hh_isolation, time_sympt_to_hosp_i, time_hosp_to_discharge_i, time_hosp_to_death_i, time_hosp_to_ICU_i, time_ICU_to_hosp_i, time_ICU_step_down_care_i));
    return rcpp_result_gen;
END_RCPP
}
// create_pop_w_households
NumericMatrix create_pop_w_households(const int pop_size, const NumericVector age_dist, const DataFrame hh_info, const int n_postcodes, const NumericVector perc_high_risk, const double perc_vac_hesitant);
RcppExport SEXP _vacamole_create_pop_w_households(SEXP pop_sizeSEXP, SEXP age_distSEXP, SEXP hh_infoSEXP, SEXP n_postcodesSEXP, SEXP perc_high_riskSEXP, SEXP perc_vac_hesitantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type age_dist(age_distSEXP);
    Rcpp::traits::input_parameter< const DataFrame >::type hh_info(hh_infoSEXP);
    Rcpp::traits::input_parameter< const int >::type n_postcodes(n_postcodesSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type perc_high_risk(perc_high_riskSEXP);
    Rcpp::traits::input_parameter< const double >::type perc_vac_hesitant(perc_vac_hesitantSEXP);
    rcpp_result_gen = Rcpp::wrap(create_pop_w_households(pop_size, age_dist, hh_info, n_postcodes, perc_high_risk, perc_vac_hesitant));
    return rcpp_result_gen;
END_RCPP
}
// determine_intitial_states
NumericVector determine_intitial_states(NumericVector ages, NumericVector prop_inf, NumericVector prop_rec);
RcppExport SEXP _vacamole_determine_intitial_states(SEXP agesSEXP, SEXP prop_infSEXP, SEXP prop_recSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_inf(prop_infSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_rec(prop_recSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_intitial_states(ages, prop_inf, prop_rec));
    return rcpp_result_gen;
END_RCPP
}
// get_contacts
NumericMatrix get_contacts(NumericMatrix contact_mat, NumericVector ids, NumericVector hh_ids, NumericVector ages, NumericVector postcodes, double prop_contacts_within_postcode, NumericVector household_isolation);
RcppExport SEXP _vacamole_get_contacts(SEXP contact_matSEXP, SEXP idsSEXP, SEXP hh_idsSEXP, SEXP agesSEXP, SEXP postcodesSEXP, SEXP prop_contacts_within_postcodeSEXP, SEXP household_isolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type contact_mat(contact_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hh_ids(hh_idsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type postcodes(postcodesSEXP);
    Rcpp::traits::input_parameter< double >::type prop_contacts_within_postcode(prop_contacts_within_postcodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type household_isolation(household_isolationSEXP);
    rcpp_result_gen = Rcpp::wrap(get_contacts(contact_mat, ids, hh_ids, ages, postcodes, prop_contacts_within_postcode, household_isolation));
    return rcpp_result_gen;
END_RCPP
}
// get_contacts_2
List get_contacts_2(List contact_info, NumericVector ids_to_get_contacts_for, NumericVector ids, NumericVector hh_ids, NumericVector ages, NumericVector postcodes, double prop_contacts_within_postcode, NumericVector household_isolation);
RcppExport SEXP _vacamole_get_contacts_2(SEXP contact_infoSEXP, SEXP ids_to_get_contacts_forSEXP, SEXP idsSEXP, SEXP hh_idsSEXP, SEXP agesSEXP, SEXP postcodesSEXP, SEXP prop_contacts_within_postcodeSEXP, SEXP household_isolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type contact_info(contact_infoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ids_to_get_contacts_for(ids_to_get_contacts_forSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hh_ids(hh_idsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type postcodes(postcodesSEXP);
    Rcpp::traits::input_parameter< double >::type prop_contacts_within_postcode(prop_contacts_within_postcodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type household_isolation(household_isolationSEXP);
    rcpp_result_gen = Rcpp::wrap(get_contacts_2(contact_info, ids_to_get_contacts_for, ids, hh_ids, ages, postcodes, prop_contacts_within_postcode, household_isolation));
    return rcpp_result_gen;
END_RCPP
}
// get_total_community_contacts
List get_total_community_contacts(NumericMatrix contact_matrix);
RcppExport SEXP _vacamole_get_total_community_contacts(SEXP contact_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type contact_matrix(contact_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_total_community_contacts(contact_matrix));
    return rcpp_result_gen;
END_RCPP
}
// in_group
NumericVector in_group(NumericVector x, NumericVector y, int id);
RcppExport SEXP _vacamole_in_group(SEXP xSEXP, SEXP ySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(in_group(x, y, id));
    return rcpp_result_gen;
END_RCPP
}
// notin_group
NumericVector notin_group(NumericVector x, NumericVector y, int id);
RcppExport SEXP _vacamole_notin_group(SEXP xSEXP, SEXP ySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(notin_group(x, y, id));
    return rcpp_result_gen;
END_RCPP
}
// subset_vec
NumericVector subset_vec(IntegerVector positions, NumericVector y);
RcppExport SEXP _vacamole_subset_vec(SEXP positionsSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subset_vec(positions, y));
    return rcpp_result_gen;
END_RCPP
}
// my_sum
int my_sum(NumericVector x);
RcppExport SEXP _vacamole_my_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(my_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// which_cpp
IntegerVector which_cpp(NumericVector x, int val, String type);
RcppExport SEXP _vacamole_which_cpp(SEXP xSEXP, SEXP valSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(which_cpp(x, val, type));
    return rcpp_result_gen;
END_RCPP
}
// rep_cpp
NumericVector rep_cpp(NumericVector x, NumericVector y);
RcppExport SEXP _vacamole_rep_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rep_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// match_and_find
IntegerVector match_and_find(IntegerVector x, IntegerVector y, IntegerVector z);
RcppExport SEXP _vacamole_match_and_find(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(match_and_find(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// make_age_prob_vec
NumericVector make_age_prob_vec(IntegerVector ages, NumericVector probabilities);
RcppExport SEXP _vacamole_make_age_prob_vec(SEXP agesSEXP, SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(make_age_prob_vec(ages, probabilities));
    return rcpp_result_gen;
END_RCPP
}
// make_contacts
List make_contacts(int state_i, int age_i, NumericVector states_c, IntegerVector contacts_i, NumericVector age_vec, NumericVector sigma, NumericVector beta, int vac_mech, int vac_status_i, NumericVector ve, double tau, int time_step);
RcppExport SEXP _vacamole_make_contacts(SEXP state_iSEXP, SEXP age_iSEXP, SEXP states_cSEXP, SEXP contacts_iSEXP, SEXP age_vecSEXP, SEXP sigmaSEXP, SEXP betaSEXP, SEXP vac_mechSEXP, SEXP vac_status_iSEXP, SEXP veSEXP, SEXP tauSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type state_i(state_iSEXP);
    Rcpp::traits::input_parameter< int >::type age_i(age_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type states_c(states_cSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type contacts_i(contacts_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type age_vec(age_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type vac_mech(vac_mechSEXP);
    Rcpp::traits::input_parameter< int >::type vac_status_i(vac_status_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ve(veSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(make_contacts(state_i, age_i, states_c, contacts_i, age_vec, sigma, beta, vac_mech, vac_status_i, ve, tau, time_step));
    return rcpp_result_gen;
END_RCPP
}
// vaccinate
List vaccinate(NumericVector num_vaccines, NumericVector ages, NumericVector high_risk_status, NumericVector vaccine_hesitancy, NumericVector vac_status, NumericVector vac_type, int time_step, NumericVector time_dose1, NumericVector time_dose2, NumericVector protection_status, int time_btw_doses, int time_to_protection, NumericMatrix age_group_vac_order);
RcppExport SEXP _vacamole_vaccinate(SEXP num_vaccinesSEXP, SEXP agesSEXP, SEXP high_risk_statusSEXP, SEXP vaccine_hesitancySEXP, SEXP vac_statusSEXP, SEXP vac_typeSEXP, SEXP time_stepSEXP, SEXP time_dose1SEXP, SEXP time_dose2SEXP, SEXP protection_statusSEXP, SEXP time_btw_dosesSEXP, SEXP time_to_protectionSEXP, SEXP age_group_vac_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type num_vaccines(num_vaccinesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type high_risk_status(high_risk_statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vaccine_hesitancy(vaccine_hesitancySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vac_status(vac_statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vac_type(vac_typeSEXP);
    Rcpp::traits::input_parameter< int >::type time_step(time_stepSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time_dose1(time_dose1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time_dose2(time_dose2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type protection_status(protection_statusSEXP);
    Rcpp::traits::input_parameter< int >::type time_btw_doses(time_btw_dosesSEXP);
    Rcpp::traits::input_parameter< int >::type time_to_protection(time_to_protectionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type age_group_vac_order(age_group_vac_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(vaccinate(num_vaccines, ages, high_risk_status, vaccine_hesitancy, vac_status, vac_type, time_step, time_dose1, time_dose2, protection_status, time_btw_doses, time_to_protection, age_group_vac_order));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vacamole_assign_hh", (DL_FUNC) &_vacamole_assign_hh, 2},
    {"_vacamole_change_states", (DL_FUNC) &_vacamole_change_states, 26},
    {"_vacamole_create_pop_w_households", (DL_FUNC) &_vacamole_create_pop_w_households, 6},
    {"_vacamole_determine_intitial_states", (DL_FUNC) &_vacamole_determine_intitial_states, 3},
    {"_vacamole_get_contacts", (DL_FUNC) &_vacamole_get_contacts, 7},
    {"_vacamole_get_contacts_2", (DL_FUNC) &_vacamole_get_contacts_2, 8},
    {"_vacamole_get_total_community_contacts", (DL_FUNC) &_vacamole_get_total_community_contacts, 1},
    {"_vacamole_in_group", (DL_FUNC) &_vacamole_in_group, 3},
    {"_vacamole_notin_group", (DL_FUNC) &_vacamole_notin_group, 3},
    {"_vacamole_subset_vec", (DL_FUNC) &_vacamole_subset_vec, 2},
    {"_vacamole_my_sum", (DL_FUNC) &_vacamole_my_sum, 1},
    {"_vacamole_which_cpp", (DL_FUNC) &_vacamole_which_cpp, 3},
    {"_vacamole_rep_cpp", (DL_FUNC) &_vacamole_rep_cpp, 2},
    {"_vacamole_match_and_find", (DL_FUNC) &_vacamole_match_and_find, 3},
    {"_vacamole_make_age_prob_vec", (DL_FUNC) &_vacamole_make_age_prob_vec, 2},
    {"_vacamole_make_contacts", (DL_FUNC) &_vacamole_make_contacts, 12},
    {"_vacamole_vaccinate", (DL_FUNC) &_vacamole_vaccinate, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_vacamole(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
